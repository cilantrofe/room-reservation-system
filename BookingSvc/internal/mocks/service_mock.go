// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/Quizert/room-reservation-system/BookingSvc/internal/models"
	hotelpb "github.com/Quizert/room-reservation-system/HotelSvc/api/grpc/hotelpb"
	gomock "github.com/golang/mock/gomock"
)

// MockBookingService is a mock of BookingService interface.
type MockBookingService struct {
	ctrl     *gomock.Controller
	recorder *MockBookingServiceMockRecorder
}

// MockBookingServiceMockRecorder is the mock recorder for MockBookingService.
type MockBookingServiceMockRecorder struct {
	mock *MockBookingService
}

// NewMockBookingService creates a new mock instance.
func NewMockBookingService(ctrl *gomock.Controller) *MockBookingService {
	mock := &MockBookingService{ctrl: ctrl}
	mock.recorder = &MockBookingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingService) EXPECT() *MockBookingServiceMockRecorder {
	return m.recorder
}

// CreateBooking mocks base method.
func (m *MockBookingService) CreateBooking(ctx context.Context, bookingRequest *models.BookingRequest, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", ctx, bookingRequest, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockBookingServiceMockRecorder) CreateBooking(ctx, bookingRequest, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingService)(nil).CreateBooking), ctx, bookingRequest, user)
}

// GetAvailableRooms mocks base method.
func (m *MockBookingService) GetAvailableRooms(ctx context.Context, hotelID int, startDate, endDate time.Time) ([]*hotelpb.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableRooms", ctx, hotelID, startDate, endDate)
	ret0, _ := ret[0].([]*hotelpb.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableRooms indicates an expected call of GetAvailableRooms.
func (mr *MockBookingServiceMockRecorder) GetAvailableRooms(ctx, hotelID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableRooms", reflect.TypeOf((*MockBookingService)(nil).GetAvailableRooms), ctx, hotelID, startDate, endDate)
}

// GetBookingsByHotelID mocks base method.
func (m *MockBookingService) GetBookingsByHotelID(ctx context.Context, hotelID, userID int) ([]*models.BookingInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingsByHotelID", ctx, hotelID, userID)
	ret0, _ := ret[0].([]*models.BookingInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingsByHotelID indicates an expected call of GetBookingsByHotelID.
func (mr *MockBookingServiceMockRecorder) GetBookingsByHotelID(ctx, hotelID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingsByHotelID", reflect.TypeOf((*MockBookingService)(nil).GetBookingsByHotelID), ctx, hotelID, userID)
}

// GetBookingsByUserID mocks base method.
func (m *MockBookingService) GetBookingsByUserID(ctx context.Context, userID int) ([]*models.BookingInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.BookingInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingsByUserID indicates an expected call of GetBookingsByUserID.
func (mr *MockBookingServiceMockRecorder) GetBookingsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingsByUserID", reflect.TypeOf((*MockBookingService)(nil).GetBookingsByUserID), ctx, userID)
}

// UpdateBookingStatus mocks base method.
func (m *MockBookingService) UpdateBookingStatus(ctx context.Context, status string, bookingMessage *models.BookingMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookingStatus", ctx, status, bookingMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookingStatus indicates an expected call of UpdateBookingStatus.
func (mr *MockBookingServiceMockRecorder) UpdateBookingStatus(ctx, status, bookingMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookingStatus", reflect.TypeOf((*MockBookingService)(nil).UpdateBookingStatus), ctx, status, bookingMessage)
}
